{"./":{"url":"./","title":"前言","keywords":"","body":"iOS逆向开发：iOS底层机制 最新版本：v0.9.5 更新时间：20241012 简介 介绍iOS逆向开发期间涉及到iOS底层机制方面的，主要是ObjC方面的内容。包括Block回调、ObjC的Runtime运行时、Apple苹果相关开发资料。以及一些逆向的动态调试中涉及到iOS底层机制的相关心得。 源码+浏览+下载 本书的各种源码、在线浏览地址、多种格式文件下载如下： HonKit源码 crifan/ios_re_ios_internal: iOS逆向开发：iOS底层机制 如何使用此HonKit源码去生成发布为电子书 详见：crifan/honkit_template: demo how to use crifan honkit template and demo 在线浏览 iOS逆向开发：iOS底层机制 book.crifan.org iOS逆向开发：iOS底层机制 crifan.github.io 离线下载阅读 iOS逆向开发：iOS底层机制 PDF iOS逆向开发：iOS底层机制 ePub iOS逆向开发：iOS底层机制 Mobi 版权和用途说明 此电子书教程的全部内容，如无特别说明，均为本人原创。其中部分内容参考自网络，均已备注了出处。如发现有侵权，请通过邮箱联系我 admin 艾特 crifan.com，我会尽快删除。谢谢合作。 各种技术类教程，仅作为学习和研究使用。请勿用于任何非法用途。如有非法用途，均与本人无关。 鸣谢 感谢我的老婆陈雪的包容理解和悉心照料，才使得我crifan有更多精力去专注技术专研和整理归纳出这些电子书和技术教程，特此鸣谢。 其他 作者的其他电子书 本人crifan还写了其他150+本电子书教程，感兴趣可移步至： crifan/crifan_ebook_readme: Crifan的电子书的使用说明 关于作者 关于作者更多介绍，详见： 关于CrifanLi李茂 – 在路上 crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2024-10-14 14:23:14 "},"ios_internal_overview/":{"url":"ios_internal_overview/","title":"iOS底层机制概览","keywords":"","body":"iOS底层机制概览 iOS逆向中，尤其是动态调试期间，往往会涉及到iOS的，尤其是ObjC的，的底层机制和实现原理。 此处整理相关的内容： ObjC Block iOS逆向开发：Block匿名函数 (crifan.org) Runtime运行时 iOS逆向开发：ObjC运行时 (crifan.org) 其他相关 Apple苹果 苹果相关开发总结 (crifan.org) crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2023-07-10 10:28:39 "},"apple_dev_res/":{"url":"apple_dev_res/","title":"Apple开发资料","keywords":"","body":"Apple苹果相关开发资料 TODO： 【已解决】iOS中st_size的off_t是什么类型 【已解决】iOS或Linux或C中pid_t的定义 此处整理，Apple苹果的，和iOS逆向相关的，尤其是涉及到iOS底层机制方面的，开发资料。 Apple=苹果 相关开发资料 源码 源代码 官网文档 Apple苹果官网 源码+文档 概述=总入口： Open Source - Apple Developer 详解： 开源代码Open Source Projects Apple Open Source https://opensource.apple.com 文档 Kernel https://developer.apple.com/library/mac/#documentation/Darwin/Conceptual/KernelProgramming/build/build.html Frameworks https://developer.apple.com/library/mac/#documentation/MacOSX/Conceptual/OSX_Technology_Overview/SystemFrameworks/SystemFrameworks.html Security https://developer.apple.com/library/archive/documentation/Security/Conceptual/Security_Overview/Introduction/Introduction.html 源码 离线下载 源码 总入口 https://opensource.apple.com/tarballs/ 子模块 ObjC Runtime https://opensource.apple.com/tarballs/objc4/ xnu https://opensource.apple.com/tarballs/xnu/ dyld https://opensource.apple.com/tarballs/dyld/ cctools https://opensource.apple.com/tarballs/cctools/ 在线浏览 源码 总入口 https://opensource.apple.com/source/ 子模块 xnu https://opensource.apple.com/source/xnu/ kern sysctl https://opensource.apple.com/source/xnu/xnu-792/bsd/kern/kern_sysctl.c.auto.html dlyd https://opensource.apple.com/source/dyld/ system_cmds https://opensource.apple.com/source/system_cmds/ sysctl system_cmds-880.60.2 https://opensource.apple.com/source/system_cmds/system_cmds-880.60.2/sysctl.tproj/ sysctl的源码 https://opensource.apple.com/source/system_cmds/system_cmds-880.60.2/sysctl.tproj/sysctl.c.auto.html Libc posix_spawn https://opensource.apple.com/source/Libc/Libc-825.25/sys/posix_spawn.c.auto.html objc4 = Objc https://opensource.apple.com/source/objc4/ 不同版本 https://opensource.apple.com/source/objc4/objc4-818.2/ https://opensource.apple.com/source/objc4/objc4-532 https://opensource.apple.com/source/objc4/objc4-646 子模块 runtime objc_release https://opensource.apple.com/source/objc4/objc4-532/runtime/NSObject.mm.auto.html objc_alloc https://opensource.apple.com/source/objc4/objc4-646/runtime/objc-internal.h objc_msgSendSuper2 https://opensource.apple.com/source/objc4/objc4-532/runtime/objc-abi.h.auto.html objc_retainBlock https://opensource.apple.com/source/objc4/objc4-493.9/runtime/objc-arr.mm.auto.html libpthread pthread_get_stackaddr_np https://opensource.apple.com/source/libpthread/libpthread-105.10.1/src/pthread.c.auto.html MacOS Forge www.macosforge.org 函数和命令的文档 注：man = manual = 手册 Apple文档总入口：Documentation Archive (apple.com) 函数 man手册 总入口：API Reference: iOS Manual Pages (apple.com) 分很多大类 Section 2: system calls and error numbers Section 2 of the manual contains documentation on UNIX system calls, error codes, and C library routines that wrap system calls. Most of these functions are described in headers that reside in /usr/include/sys. For a detailed introduction, see intro(2) Mac OS X Manual Page For intro(2) (apple.com) Section 3: C libraries Section 3 of the manual contains documentation on C library routines. This section excludes library routines that merely wrap UNIX system calls. Most of these functions are described in headers that reside in /usr/include or subdirectories therein. For a detailed introduction, see intro(3) Mac OS X Manual Page For intro(3) (apple.com) Section 3cc: 加密 解密 算法 相关 API Reference: iOS Manual Pages (apple.com) Section 3ssl Section 3ssl of the manual contains documentation on OpenSSL library routines. These functions are described in headers that reside in /usr/include/openssl, and are split between the libssl and libcrypto libraries For a detailed introduction, see crypto(3) and ssl(3) Mac OS X Manual Page For crypto(3ssl) (apple.com) crypto - OpenSSL cryptographic library Mac OS X Manual Page For ssl(3ssl) (apple.com) SSL - OpenSSL SSL/TLS library Section 3x Section 3x of the manual contains documentation on curses-related library routines used for general formatting on text terminals. These functions are described in headers that reside in /usr/include, and are located in the libncurses library. For a detailed introduction, see ncurses(3) Mac OS X Manual Page For ncurses(3x) (apple.com) ncurses - CRT screen handling and optimization package Section 5 Section 5 of the manual contains documentation on file formats and conventions. It includes documentation about file-system data structures, information about configuration files for various daemons, and information about data structures used in various binary and text file formats used by various parts of the operating system. For a detailed introduction, see intro(5). Mac OS X Manual Page For manpages(5) (apple.com) manpages -- An introduction to manual pages log日志的字符串格式化参数语法 String Format Specifiers (apple.com) The iPhone Wiki syscall Kernel Syscalls - The iPhone Wiki hw.machine 机型 映射 Models - The iPhone Wiki 其他来源 内核原理和机制 OS Internals: (newosxbook.com) -> MAC OS X Internals: A Systems Approach: Singh, Amit: 9780321278548: Books: Amazon.com J's Entitlement DataBase (newosxbook.com) OS X/iOS Entitlement Database - v0.8 As compiled by Jonathan Levin, @Morpheus__ Now with entitlements from iOS 9.0.2 through 15.2, MacOS 11.4 through 15.3 iOS逆向英文教程 据说是第一本英文书的专门详细介绍iOS逆向的书： iosre/iOSAppReverseEngineering: The world’s 1st book of very detailed iOS App reverse engineering skills :) (github.com) -> https://github.com/iosre/iOSAppReverseEngineering/blob/master/iOSAppReverseEngineering.pdf 有需要可以学习和参考。 crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-10-24 16:09:13 "},"apple_dev_res/ios_re_used.html":{"url":"apple_dev_res/ios_re_used.html","title":"iOS逆向常涉及内容","keywords":"","body":"iOS逆向常涉及内容 在iOS逆向期间，常涉及到很多Apple苹果相关的开发资料，整理如下供参考。 ObjC的类 UIDevice UIDevice | Apple Developer Documentation xnu 由于xnu很重要，iOS逆向期间经常涉及到，所以单独介绍相关内容： xnu 离线下载 https://opensource.apple.com/tarballs/xnu/ 在线浏览 https://opensource.apple.com/source/xnu/ 查看自己的xnu版本 对于自己的越狱手机，此处的iPhone7，去查看对应的xnu的版本： ➜ ~ ssh root@192.168.0.33 iPhone7:~ root# uname -a Darwin iPhone7 19.6.0 Darwin Kernel Version 19.6.0: Sat Jun 27 04:35:37 PDT 2020; root:xnu-6153.142.1~4/RELEASE_ARM64_T8010 iPhone9,1 arm64 D10AP Darwin 此处被测的已越狱的iPhone的xnu是： xnu-6153.142.1 去官网找对应版本的代码： xnu Source Browser (apple.com) 没看到这个版本 -》只能找到，最接近的版本： xnu-6153.141.1.tar.gz https://opensource.apple.com/tarballs/xnu/xnu-6153.141.1.tar.gz 可下载下来，供后续参考研究。 iOS中的基本类型的定义 关于iOS中的很多相关的底层的类型： __darwin_mode_t __darwin_off_t __darwin_pid_t 的定义是： typedef __uint16_t __darwin_mode_t; /* [???] Some file attributes */ typedef __int64_t __darwin_off_t; /* [???] Used for file sizes */ typedef __int32_t __darwin_pid_t; /* [???] process and group IDs */ 来源： Apple的opensource https://opensource.apple.com/source/xnu/xnu-792/bsd/sys/_types.h 其他 apple/darwin-xnu: The Darwin Kernel (mirror) https://github.com/apple/darwin-xnu/blob/main/bsd/sys/_types.h 头文件 errno.h 旧版本：xnu-201 https://opensource.apple.com/source/xnu/xnu-201/bsd/sys/errno.h #define ENOTSUP 45 /* Operation not supported */ #ifndef _POSIX_SOURCE #define EOPNOTSUPP ENOTSUP /* Operation not supported */ 新版本：xnu-792 https://opensource.apple.com/source/xnu/xnu-792/bsd/sys/errno.h.auto.html #define ENOTSUP 45 /* Operation not supported */ 结论： ENOTSUP = 45 在线浏览xnu代码 XXR - XNU cross reference - Alpha (newosxbook.com) man手册文档 前面介绍的 Apple 函数 man手册 总入口：API Reference: iOS Manual Pages (apple.com) 中有很多，iOS逆向期间，常常会涉及到的一些API或命令，整理如下： Section 2: system calls and error numbers ENOMEM 错误码定义 12 = ENOMEM Cannot allocate memory The new process image required more memory than was allowed by the hardware or by system-imposed mem-ory memory ory management constraints. A lack of swap space is normally temporary; however, a lack of core is not. Soft limits may be increased to their corresponding hard limits. stat64 Mac OS X Manual Page For stat64(2) Section 3: C libraries system Mac OS X Manual Page For system(3) sysctl Mac OS X Manual Page For sysctl(3) strlen Mac OS X Manual Page For strlen(3) iPhone iOS SDK 源码 iPhoneOS13.0.sdk iOS-SDKs/iPhoneOS13.0.sdk at master · xybp888/iOS-SDKs (github.com) stat.h iOS-SDKs/stat.h at master · xybp888/iOS-SDKs (github.com) syscall.h iOS-SDKs/syscall.h at master · xybp888/iOS-SDKs (github.com) sysctl.h iOS-SDKs/sysctl.h at master · xybp888/iOS-SDKs (github.com) types.h iOS-SDKs/types.h at master · xybp888/iOS-SDKs (github.com) 改机相关 sysctl相关 苹果官网文档 sysctlbyname sysctlbyname | Apple Developer Documentation sysctl sysctl | Apple Developer Documentation man手册 SYSCTL Mac OS X Manual Page For sysctlbyname(3) (apple.com) 源码 sysctl.c (apple.com) 其他 sysctlbyname (freebsd.org) sysctlbyname(3) manual page (lemoda.net) sysctl, sysctlbyname (qnx.com) sysctlbyname.3 (daemon-systems.org) 其他 iOS中 属性列表 Property List = plist Introduction to Property Lists (apple.com) C语言相关开发整理和心得 gcc 编译时-Wxxx的参数： Warning Options (Using the GNU Compiler Collection (GCC)) clang 编译时参数： Clang Compiler User’s Manual — Clang 13 documentation (llvm.org) Clang command line argument reference — Clang 13 documentation (llvm.org) crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2023-07-10 10:44:09 "},"common_logic/":{"url":"common_logic/","title":"通用逻辑","keywords":"","body":"通用逻辑 TODO： 【整理】iOS逆向心得：给函数加了hook同时加断点会导致EXC_BREAKPOINT的崩溃 【已解决】iOS逆向心得：类没有setXxx函数但是有属性xxx 【整理】iOS逆向调试心得：ObjC或ARM中从偏移量中取值的不同写法 【已解决】iOS中的caddr_t类型的定义 TODO： 把各种iOS逆向期间，涉及的各种类型的定义，也整理过来 crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2024-10-11 11:41:53 "},"common_logic/prologue_epilogue.html":{"url":"common_logic/prologue_epilogue.html","title":"Prologue和Epilogue","keywords":"","body":"Prologue和Epilogue TODO： 【整理】编程基础知识：函数Prologue开场白和函数Epilogue结尾 crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2024-10-11 11:42:02 "},"ios_internal_logic/":{"url":"ios_internal_logic/","title":"iOS内核和底层机制","keywords":"","body":"iOS内核和底层机制 TODO： iOS内核和底层机制 【整理】苹果的二进制格式Mach-O的详细定义 【记录】研究XCode中iOS的app的ALSR相关配置 【整理】Mac和iOS中的Sandbox沙箱 【已解决】研究iOS中app的目录的UUID类的值和app名称如何映射 【未解决】iOS的app的启动流程启动过程 crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2024-10-11 11:46:36 "},"ios_internal_logic/mach_o/":{"url":"ios_internal_logic/mach_o/","title":"Mach-O","keywords":"","body":"Mach-O Mach-O是Apple平台（iOS和macOS等）中的底层二进制（可执行文件、库等）的格式 具体详见 可执行文件格式：Mach-O crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2024-10-11 11:48:18 "},"ios_internal_logic/XNU/":{"url":"ios_internal_logic/XNU/","title":"XNU","keywords":"","body":"XNU TODO： 【整理】iPhone相关名词：xnu的含义 crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2024-10-11 11:46:43 "},"ios_internal_logic/frameworks/":{"url":"ios_internal_logic/frameworks/","title":"Frameworks框架","keywords":"","body":"Frameworks框架 Frameworks=框架=库=动态库 含义：Frameworks are bundles that contain a linkable library (usually a dylib) and the associated resources and headers for development. 分类 public /System/Library/Frameworks private /System/Library/PrivateFrameworks 额外说明 后续进化为 dyld_shared_cache 常见Frameworks 常见Frameworks：（以 iOS 4.0 (8A293)为例） Frameworks 包名 （内部函数的）前缀 描述 aaaaaaaaaa aaaa aaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa Accelerate.framework com.apple.Accelerate cblas, vDSP Vector and Matrix math, digital signal processing, large number handling, and image processing AddressBook.framework com.apple.AddressBook AB Provides access to the Address Book database AddressBookUI.framework com.apple.AddressBookUI AssetsLibrary.framework com.yourcompany.AssetsLibrary AL Used to access pictures and videos managed by the Photos application AudioToolbox.framework com.apple.audio.toolbox.AudioToolbox AU, Audio Provides interfaces for recording, playback, stream parsing, and managing audio sessions. Part of CoreAudio AudioUnit.framework com.apple.audio.units.AudioUnit AU, Audio Interfaces for the loading of audio units and their use AVFoundation.framework com.apple.avfoundation AV Used for playing and recording audio and video CFNetwork.framework com.apple.CFNetwork CF Interfaces for high-performance networking CoreAudio.framework com.apple.audio.CoreAudio Audio Declares constants and data-types used by other interfaces in CoreAudio CoreData.framework com.apple.CoreData NS Interfaces for application data model manipulation CoreFoundation.framework com.apple.CoreFoundation CF Basic data management and services CoreGraphics.framework CG APIs to interface with the Quartz engine, allows 2D rendering, etc CoreLocation.framework com.apple.corelocation CL Interfaces for determining location CoreMedia.framework com.apple.CoreMedia CM Low-level routines for manipulating audio and video CoreMotion.framework com.apple.coremotion CM Interfaces for accessing accelerometer and gyrometric data CorePDF.framework com.apple.CorePDF CoreTelephony.framework com.apple.coretelephony CT Allows access to Carrier information and information pertaining to a current call CoreText.framework com.apple.CoreText CT Text layout and rendering engine CoreVideo.framework com.apple.CoreVideo CV Low-level routines for manipulating audio and video - Apple advises not to use this framework directly, and although public doesn't document much of it EventKit.framework com.apple.eventkit EK Interfaces for accessing Calendar event data. This is a replacement for the older Calendar.framework EventKitUI.framework com.apple.eventkitui ExternalAccessory.framework com.apple.ExternalAccessory EA Interfaces for communication with attached external accessories via 30-pin dock or Bluetooth. Lightning is not yet mentioned by Apple in documentation Foundation.framework com.apple.Foundation NS Objective-C wrappers to features found in CoreFoundation with extra features and functionality not covered by Objective-C GameKit.framework com.apple.GameKit GK Manages P2P connectivity. With iOS 4.1 and later, GameKit can be used with Game Center (an extension to the framework) to create social games iAd.framework com.apple.iAd AD IOKit.framework Low-level framework for communicating with the kernel and hardware. Apple advises not to use this framework directly and will reject it from the App Store ImageIO.framework com.apple.ImageIO.framework CG Input and output for images. Part of CoreGraphics MapKit.framework com.apple.MapKit MK Classes for embedding Map graphical interfaces. Before iOS 5.1, Google Mobile Maps was used to provide map data; afterwards, Apple provided the map data. MediaPlayer.framework com.apple.MediaPlayer MP Provides facilities to play audio, and video. Also allows access to the iPod or Music library. MessageUI.framework com.apple.messageui MF Interfaces for SMS and Mail compose view controllers without leaving the application. MobileCoreServices.framework com.apple.MobileCoreServices UT Defines UTIs supported by the system OpenAL.framework com.apple.audio.OpenAL AL Interface for the cross-platform audio library OpenGLES.framework com.apple.opengles EAGL, GL Interface for the OpenGL ES library QuartzCore.framework com.apple.QuartzCore CA Contains the CoreAnimation interfaces QuickLook.framework com.apple.QuickLook QL interfaces for previewing files of unknown formats Security.framework com.apple.Security CSSM, Sec Interfaces for managing keys, trust policies, and certificates StoreKit.framework com.apple.StoreKit SK Interfaces for handling in-app purchase transactions System.framework SystemConfiguration.framework com.apple.SystemConfiguration SC Interfaces for determining network availability UIKit.framework com.apple.UIKit UI Classes for iOS UI elements and for the user interface layer of applications crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2024-10-11 12:05:40 "},"ios_internal_logic/frameworks/dyld_shared_cache.html":{"url":"ios_internal_logic/frameworks/dyld_shared_cache.html","title":"dyld_shared_cache","keywords":"","body":"dyld_shared_cache dyld的shared cache = dyld (shared) cache 概述：所有Framework库都被合并到共享缓存shared cache中了 位置： /System/Library/Caches/com.apple.dyld/ /System/Library/Caches/com.apple.dyld/dyld_shared_cache_armX X= 6, 7, 7s, 64 举例 /System/Library/Caches/com.apple.dyld/dyld_shared_cache_arm64 /System/Library/dyld/dyld_shared_cache_arm64e 详解 从iPhone OS 3.1之后，所有系统（私有的private和公开的public）的库，都被合并到一个大的缓存文件了，目的是提升性能 原始的单个的库文件，就多余了，所以被去掉了 -》直接访问原始的单个系统库文件，就会出找不到的现象 所以去从之前的，保存单个系统库的位置 public=公开的库 /System/Library/Frameworks private=私有的库 /System/Library/PrivateFrameworks 就找不到库了 举例 iOS 13.5 二进制程序代码 位置 /Applications /private/var/staged_system_apps 是shims的 -> class-dump：会报错，找不到ObjC section 其他介绍 /System/Library/Frameworks - The iPhone Wiki /System/Library/Frameworks A framework is a dynamic library and resources for that library, such as images and localization strings. Frameworks have the file extension .framework. In iOS there are two kinds of frameworks: public frameworks and private frameworks. Public frameworks are allowed to be used in App Store apps. Private frameworks are intended to be used only by Apple's apps, and are more unstable against firmware changes, but many of the interesting features are in the private frameworks. Since iOS 3.1, all default (private and public) libraries have been combined into a big cache file in /System/Library/Caches/com.apple.dyld/dyld_shared_cache_armX to improve performance. See dyld_shared_cache for more details. The original libraries are no longer useful for non-on-device-developers, so they are eliminated from the system. The framework folders still contain other resources, such as localization strings. Private Frameworks See /System/Library/PrivateFrameworks. 系统相关工具 update_dyld_shared_cache man page update_dyld_shared_cache(1) BSD General Commands Manual update_dyld_shared_cache(1) NAME update_dyld_shared_cache -- Updates dyld's shared cache SYNOPSIS update_dyld_shared_cache [-root directory] [-overlay directory] [-arch arch] [-force] [-debug] [-sort_by_name] [-universal_boot] [-verify] [-dylib_list file] [-iPhone] [-cache_dir dir] DESCRIPTION update_dyld_shared_cache ensures that dyld's shared cache is up-to-date. This tool is normally only run by Apple's Installer and Software Update, as they are the only official ways for OS dylibs to be updated. But if for some reason you used another mechanism to alter an OS dylib, you should manually run update_dyld_shared_cache. Note that the new cache does not take effect until the OS is rebooted. If a safe-boot is done (booting with shift key held down) the cache is deleted. The dyld shared cache is mapped by dyld into a process at launch time. Later, when loading any mach-o image, dyld will first check if is in the share cache, and if it is will use that pre-bound version instead of opening, mapping, and binding the original file. This results in significant performance improvements to launch time. update_dyld_shared_cache scans the directory /var/db/dyld/shared_region_roots for text files containing paths to mach-o executables. The full dependencies of all dylibs required by those executables is used to determine which libraries are commonly used and should be placed in the shared cache. If one of the text files contains a path to a dylib, that dylib and its dependents will be forced into the cache. update_dyld_shared_cache builds a separate cache file for each architecture. The cache files and a readable text map of the cached are gen- erated to /var/db/dyld. You must be root to run this tool. The options are as follows: -root directory This option specifies the root of an OS installation for which dyld's shared cache should be updated. This is used by the In- staller to update the dyld shared cache in a partition other than the one you into which you are currently booted. The cache files are created in the var/db/dyld directory of the specified directory. Note: if you are manually doing this, be sure to run the update_dyld_shared_cache tool that is in the partition being updated. This assures the cache format created will match that expected when booting off that partition. -overlay directory This option specifies the root of a sparse directory tree. When building the dyld shared cache, any corresponding mach-o files in the sparse directory will override those in the boot partition. This is used by Software Update to build a dyld shared cache for the update that is about to be installed. The cache files are created in the var/db/dyld directory of the specified direc- tory. -arch arch By default update_dyld_shared_cache generates cache files for all architecture that the current machine can execute. You can override this behavior by specifying one or more -arch options and list exactly which architectures should have their shared caches updated. -force This option will cause update_dyld_shared_cache to regenerated the shared cache files even if they appear to be already up-to- date. -debug This option prints out additional information about the work being done. -sort_by_name By default update_dyld_shared_cache assigns a random start address to each mach-o image in the cache. This option causes the start addresses to be chosen in path order, thus subsequent runs will produce the same address layout which can help reproduce some bugs. -universal_boot This option can only be used running on an machine with an Intel processor. It builds caches that can be used when booting on both 32-bit and 64-bit machines. -dylib_list file Instead of scanning /var/db/dyld/shared_region_roots/, this option provides a file that contains a list of the dylibs to use when building the shared cache file. -verify Will regenerate a shared cache in-memory that matches the randomization of the existing shared cache file. Then instead of writ- ing the cache file, it compares the in-memory cache file to the on disk version and reports any differences. -iPhone indicates that cache is not for the current Mac OS X, but for rather for an iPhone -cache_dir directory This option specifies the directory in which to create the cache file(s). If not specified, the cache file(s) are created in the standard location (e.g. var/db/dyld/) of the root partition. FILES /var/db/dyld/shared_region_roots directory of text files with paths to mach-o images used to determine what should be in shared cache. SEE ALSO dyld(1) Darwin Oct 10, 2008 Darwin 逆向提取工具 dyld_decache 代码 https://github.com/kennytm/Miscellaneous/blob/master/dyld_decache.cpp 相关 https://github.com/iosre/iOSAppReverseEngineering/blob/master/iOSAppReverseEngineering.pdf Dsc_extractor 介绍 is Apple’s own open-source tool for extracting libraries and frameworks from dyld_shared_cache. When extracting data, the utility saves the locations and original names of all extracted objects. 开源代码 dsc_extractor.cpp (apple.com) dyld_cache_extract 作用：可视化的工具，把dyld_shared_cache载入即可解析出来 Github https://github.com/macmade/dyld_cache_extract 涉及到的地方 相关函数 dyld_priv.h // Returns if any OS dylib has overridden its copy in the shared cache // // Exists in iPhoneOS 3.1 and later // Exists in Mac OS X 10.10 and later extern bool dyld_shared_cache_some_image_overridden(void); // Returns path used by dyld for standard dyld shared cache file for the current arch. // // Exists in Mac OS X 10.11 and later extern const char* dyld_shared_cache_file_path(void); struct dyld_shared_cache_dylib_text_info { uint64_t version; // current version 2 // following fields all exist in version 1 uint64_t loadAddressUnslid; uint64_t textSegmentSize; uuid_t dylibUuid; const char* path; // pointer invalid at end of iterations // following fields all exist in version 2 uint64_t textSegmentOffset; // offset from start of cache }; typedef struct dyld_shared_cache_dylib_text_info dyld_shared_cache_dylib_text_info; #ifdef __BLOCKS__ // Given the UUID of a dyld shared cache file, this function will attempt to locate the cache // file and if found iterate all images, returning info about each one. Returns 0 on success. // // Exists in Mac OS X 10.11 and later // iOS 9.0 and later extern int dyld_shared_cache_iterate_text(const uuid_t cacheUuid, void (^callback)(const dyld_shared_cache_dylib_text_info* info)); // Given the UUID of a dyld shared cache file, and a NULL terminated array of extra directory paths to search, // this function will scan the standard and extra directories looking for a cache file that matches the UUID // and if found iterate all images, returning info about each one. Returns 0 on success. // // Exists in Mac OS X 10.12 and later // iOS 10.0 and later extern int dyld_shared_cache_find_iterate_text(const uuid_t cacheUuid, const char* extraSearchDirs[], void (^callback)(const dyld_shared_cache_dylib_text_info* info)); #endif /* __BLOCKS */ // Gets the UUID of the dyld shared cache in the current process. // Returns false if there is no dyld shared cache in use by the processes. // // Exists in Mac OS X 10.12 and later // Exists in iOS 10.0 and later extern bool _dyld_get_shared_cache_uuid(uuid_t uuid); // Returns the start address of the dyld cache in the process and sets length to the size of the cache. // Returns NULL if the process is not using a dyld shared cache // // Exists in Mac OS X 10.13 and later // Exists in iOS 11.0 and later extern const void* _dyld_get_shared_cache_range(size_t* length); // Returns if the currently active dyld shared cache is optimized. // Note: macOS does not use optimized caches and will always return false. // // Exists in Mac OS X 10.15 and later // Exists in iOS 13.0 and later extern bool _dyld_shared_cache_optimized(void); // Returns if the currently active dyld shared cache was built locally. // // Exists in Mac OS X 10.15 and later // Exists in iOS 13.0 and later extern bool _dyld_shared_cache_is_locally_built(void); // This is similar to _dyld_shared_cache_contains_path(), except that it returns the canonical // shared cache path for the given path. // // Exists in macOS 10.16 and later // Exists in iOS 14.0 and later extern const char* _dyld_shared_cache_real_path(const char* path); /System/Library/Caches/com.apple.dyld/dyld_shared_cache_armX iPhone7 iPhone7:~ root# ls -lh /System/Library/Caches/com.apple.dyld total 1.7G -rwxr-xr-x 1 root admin 1.7G Apr 3 2020 dyld_shared_cache_arm64* iPhone8 iPhone8-150:~ root# ls -lh /System/Library total 0 ... drwxr-xr-x 40 root wheel 1.3K Sep 16 2021 CacheDelete/ drwxr-xr-x 6 root wheel 192 Sep 16 2021 Caches/ ... -> iPhone8-150:~ root# ls -lh /System/Library/Caches total 0 lrwxr-xr-x 1 root wheel 45 Sep 16 2021 apticket.der -> ../../../usr/standalone/firmware/apticket.der drwxr-xr-x 9 root wheel 288 Sep 16 2021 com.apple.dyld/ drwxr-xr-x 21 root wheel 672 Nov 11 2014 com.apple.factorydata/ drwxr-xr-x 2 root wheel 64 Sep 16 2021 com.apple.kernelcaches/ -> iPhone8-150:~ root# ls -lh /System/Library/Caches/com.apple.dyld total 2.5G -rwxr-xr-x 1 root admin 521M Sep 16 2021 dyld_shared_cache_arm64* -rwxr-xr-x 1 root admin 513M Sep 16 2021 dyld_shared_cache_arm64.1* -rwxr-xr-x 1 root admin 508M Sep 16 2021 dyld_shared_cache_arm64.2* -rwxr-xr-x 1 root admin 83M Sep 16 2021 dyld_shared_cache_arm64.3* -rwxr-xr-x 1 root admin 238M Sep 16 2021 dyld_shared_cache_arm64.4* -rwxr-xr-x 1 root admin 199M Sep 16 2021 dyld_shared_cache_arm64.5* -rwxr-xr-x 1 root admin 456M Sep 16 2021 dyld_shared_cache_arm64.symbols* /System/Library/dyld/dyld_shared_cache_arm64e How to Reverse Engineer an Undocumented macOS API to Use It in a Swift Project | Apriorit Step 1: Obtaining a method signature The OSSystemExtensionClient API is part of the SystemExtensions framework. The framework is packaged as a dynamically linked shared library, which is part of the dynamically linked shared library cache available at /System/Library/dyld/dyld_shared_cache_arm64e. objc-runtime-new.mm objc-runtime-new.mm (apple.com) objc_class::demangledName(bool realize) ... // fixme lldb's calls to class_getName() can also get here when // interrogating the dyld shared cache. (rdar://27258517) // fixme runtimeLock.assertLocked(); // fixme assert(realize); Mask.dylib ➜ DynamicLibraries rabin2 -i Mask.dylib > MaskDylib_rabin2_i_imports.txt -> MaskDylib_rabin2_i_imports.coffee 50 0x0000e508 NONE FUNC dyld_shared_cache_file_path IDA DYLD Shared Cache Utils | Hex-Rays Docs IDA: IDA 7.2 - The Mac Rundown (hex-rays.com) This is another annoyance of dyldcache analysis Cutter 中有：dyldcache jtool2 ➜ jtool2 jtool2 --help ... -h Dump Mach-O (or DYLD Shared Cache) header ... -e extract fat slice, Mach-O segment/section, dyld shared cache dylib or (NEW) kernelcache kext ... dyldinfo Compatible Options: --bind print addresses dyld will set based on symbolic lookups --lazy_bind print addresses dyld will lazily set on first use --opcodes print opcodes used to generate the rebase and binding information --function_starts print table of function start addresses ... --tbd Create a .tbd file (for *OS private frameworks only - you'll need the dyld shared cache for this) crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2024-10-14 10:02:07 "},"appendix/":{"url":"appendix/","title":"附录","keywords":"","body":"附录 下面列出相关参考资料。 crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2022-03-17 20:39:28 "},"appendix/reference.html":{"url":"appendix/reference.html","title":"参考资料","keywords":"","body":"参考资料 可执行文件格式：Mach-O 【整理】iOS中的Frameworks框架 【整理】dyld相关：dyld_shared_cache动态库共享缓存 【记录】研究黑豹dylib文件zzzzHeiBaoLib.dylib中字符串和反越狱相关内容 【已解决】dyld_shared_cache相关：update_dyld_shared_cache 【规避解决】Mac M2 Max中jtool2运行崩溃：killed 【已解决】用jtool2查看Mach-O的二进制akd找代码段相关信息 谈谈 iOS 中的 dyld_shared_cache · Issue #55 · kingcos/Perspective (github.com) update_dyld_shared_cache(1) [osx man page] Extracting libraries from dyld_shared_cache | Worth Doing Badly dyld_shared_cache - iPhone Development Wiki OS Internals: (newosxbook.com) MAC OS X Internals: A Systems Approach: Singh, Amit: 9780321278548: Books: Amazon.com XXR - XNU cross reference - Alpha (newosxbook.com) Open Source - Apple Developer Documentation Archive (apple.com) Mac OS X Manual Page For stat64(2) (apple.com) Kernel Syscalls - The iPhone Wiki 越狱检测抖音逻辑??? - Cydia | 微信公众号文章阅读 - WeMP Frameworks - iPhone Development Wiki crifan.org，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2024-10-11 14:23:45 "}}